[{"content":"10月にやったことのログ。\n成長も見やすいし何やったか振り返れるので、毎月やったことをログとして残していこうと思う。\nちなみにこれまでの記事は以下です。\n コロナ自粛期間の4月にやったこと コロナ自粛期間の5月にやったこと コロナ自粛期間の6月にやったこと コロナ自粛期間の7月にやったこと コロナ自粛期間の8月にやったこと コロナ自粛期間の9月にやったこと  10月にやったこと 9月に比べると10月は比較的新しいことに挑戦できました。\nサイト制作 引き続きVue.jsとTypeScriptでフロント書き書きしてました\nコンポーネントの切り分けだいぶ慣れた\nプロダクト開発 8月頃からゆるゆる開発しているプロダクト一覧表示と検索ができるサービス。\n今月は一気に開発が進んだ気がします。\nあとはドメインがきたらひとまずリリースしようかなと。\nVuexが分からない、というかFluxが分からない、、、\nついでにMVVMも理解できてないので勉強したい、最近アーキテクチャに興味湧いてきてます。\n「達人に学ぶDB設計徹底指南書」読んだ 良書でした。\n正規化は100%正義だと思っていたけど、パフォーマンスが落ちる場合もあるらしいです。\nDBに深い関心が芽生えたとともにSQLがっつり勉強したくなりました。\nn+1問題改善 rails製のサービス開発をお手伝いしていて、そこでn+1問題が起きまくっていたのでクエリの呼び出し方をいろいろ変えてみました。\n改善できたとこもあるけど、よく分からない部分の方が多いので引き続き試行錯誤していきたいです。\niOSアプリのサーバーサイドのAPI書いた SNSでお声がけいただいて新たにメンバーとしてjoinしました。\n新しくテーブル作る時、今後の機能の拡張性を考えながら作るのまじで難しい。。。\n初めてSwagger使いやした。hamlも初めて書いた。\nあと、rails勉強してたはずなのに「こんなに知らないメソッドあるんだ」ってくらい初めて見るメソッドが多くて腰抜けた。。。\nまだまだrailsも勉強足りないね…むり。。。\nhugoでブログ開設しました フルスクラッチでも良かったけど良さげなテーマ見つけたので拝借してアレンジしました。\nビルドとデプロイはGitHub Actionsで自動化しました。(20回failしたのは内緒・・・)\n知人にファビコン作成を依頼中です、楽しみ\u0026hellip;！\nrebase完全に理解した ずっと理解できなかったrebaseという概念をようやく理解できたような気がします。(気がするだけかも。。。！？)\n自分のローカルで使う時は featureブランチ上でmasterかdevelopをmergeしたい時にrebaseで代用すればコミット履歴がすっきりしそう。\nまとめ 10月はわりと新しいことに挑戦できた気がします。\n11月からはずっと逃げてきたアルゴリズムとデータ構造を勉強し始めようかなと思っています。\nあと、積読が溜まっているのでそっちも消化したい。\n","description":"log on October","id":0,"section":"posts","tags":null,"title":"コロナ自粛期間の10月にやったこと","uri":"http://example.org/posts/2020/log-on-october/"},{"content":"9月にやったことのログ。\n成長も見やすいし何やったか振り返れるので、毎月やったことをログとして残していこうと思う。\nちなみにこれまでの記事は以下です。\n コロナ自粛期間の4月にやったこと コロナ自粛期間の5月にやったこと コロナ自粛期間の6月にやったこと コロナ自粛期間の7月にやったこと コロナ自粛期間の8月にやったこと  9月にやったこと 9月も8月に引き続き開発タスクに追われていました。\nインプットにもう少し時間使いたい、、、\nLP制作 先月から引き続き、Vue.jsとTypeScriptをメインで使用してサイト制作に取り組みました。\nComposition API という新しい記法でVueを書いています。\nコンポーネントの作り方が徐々に分かってきた。\nプロダクト開発 firestoreとGASの連携に成功。\ngoogle formから送信したデータをfirestoreに保存することはできました。\nただ、画像の保存・参照がうまくいかず。。。\n最終的に、google formは使わずVue.jsのアプリケーション内でフォーム入力も完結させることに。\nfirestoreにデータを送信・保存し、画像はcloud storageから参照する形にしました。\nなんとかここまで実装できて良かった。\ngitコマンド諸々 チーム開発をする機会が増え、色々なgitコマンドを触るようになりました。\n特に新しく学んだのは、rebase, squash, cherry-pick コマンド。\nrebase はまだよく分からないけど使いこなせるようになりたい、、！\nまとめ 9月も開発タスクに追われる日々でした、、、\n最近開発タスクに追われて新しい技術やスキルの習得に時間を割けないのがもどかしいです。\n10月は最低あと3つは新しいことしたいなぁと、頑張る。\n","description":"log on September","id":1,"section":"posts","tags":null,"title":"コロナ自粛期間の9月にやったこと","uri":"http://example.org/posts/2020/log-on-september/"},{"content":"8月にやったことのログ。\n成長も見やすいし何やったか振り返れるので、毎月やったことをログとして残していこうと思う。\nちなみにこれまでの記事は以下です。\n コロナ自粛期間の4月にやったこと コロナ自粛期間の5月にやったこと コロナ自粛期間の6月にやったこと コロナ自粛期間の7月にやったこと  8月にやったこと 8月は開発のタスクが多すぎてそれに追われてました。。\nサービス開発のお手伝い 先月から引き続きRailsを使ったサービス開発に取り組みました。\n自分が作った機能がリリースされたので喜んでました。\nあとはjQueryを使ったモーダルの表示とか実装しました。\nサイト制作 Vue.jsとTypeScriptをメインで使用してサイト制作に取り組みました。\nどこまで細かくコンポーネントにするかが難しい。。TypeScript使ったらバニラJSには戻れない笑\nCSSアニメーションも結構触ってフロントエンド楽しい！ってなってました。\nプロダクト開発 バイト先のプログラミングスクールで受講生のプロダクト一覧の表示と検索ができるサイトが必要になったので、その開発をしていました。\nVuetifyを使ってざっくりフロントのレイアウトを作るのはできたので、あとはバックエンド。。。\nfirestoreとGASでなんとかならないかなぁと試行錯誤中です。\nまとめ 8月は開発タスクに追われてインプットの時間全然取れなかった。\n9月もこの傾向続きそうなのでちょっと心配です。\n仕事しながらインプットしてる社会人の方ほんとすごいわ。\n","description":"log on August","id":2,"section":"posts","tags":null,"title":"コロナ自粛期間の8月にやったこと","uri":"http://example.org/posts/2020/log-on-august/"},{"content":"railsのver.6以上を使うなら asset pipeline ではなく webpacker でCSSを読み込みたいと思い、実装したのでメモです。\nディレクトリ構成 webpacker のREADME.mdより。\napp/javascript: └── packs: # only webpack entry files here └── application.js └── application.css 手順 rails new は完了しているものとします。\nrails6より下のversion使ってる人はwebpackerもインストールしましょう。\n新規フォルダ・ファイル作成 ↑のディレクトリ構成に従う。\napp/javascript/packsに application.css ファイルを作成\nエントリーポイント エントリーポイントは packs/application.js なので、application.cssファイルをimport。\n1  import \u0026#34;packs/application.css\u0026#34;;   application.html.erbを編集 views/layouts/application.html.erb に以下を記述。\nおそらくデフォルトだと stylesheets_link_tag になっているので、そこを stylesheets_pack_tag に変更すればいいかと。\n\u0026lt;%= javascript_pack_tag 'application' %\u0026gt; \u0026lt;%= stylesheet_pack_tag 'application' %\u0026gt; CSSを書く あとはCSSを書くのみです。\n次はReact、Vue.jsあたりも導入してみたい。\n今回は手順だけをメモした感じなので、もう少し詳しく中身を知りたい人は↓が参考になると思われます。\n参考 Rails 6+Webpacker開発環境をJS強者ががっつりセットアップしてみた（翻訳）\nwebpackerでcssとimagesを参照したい\nwebpacker でページごとにスタイルを分ける\n","description":"Load CSS by webpacker","id":3,"section":"posts","tags":null,"title":"[Rails] webpackerでCSSを読み込みたい","uri":"http://example.org/posts/2020/webpacker-css/"},{"content":"今回はいいね数の多い順(いいね数が0も含む)に投稿を表示させるランキング機能の実装方法についてです。\nランキング機能の実装方法は他でもあったのですが、いいねが0の投稿も表示させている記事が見当たらなかったので実装してみました。\n前提  投稿のテーブルは posts、 ユーザーのテーブルは users とする。 いいね機能に必要な中間テーブルは likes とする。 posts・users・likes それぞれのテーブルはいずれも作成済みとする。  手順 モデルにアソシエーションを定義 1 2 3 4 5  class Post \u0026lt; ApplicationRecord belongs_to :user has_many :likes, dependent: :destroy has_many :liked_users, through: :likes, source: :user end   1 2 3 4 5  class User \u0026lt; ApplicationRecord has_many :posts,dependent: :destroy has_many :likes, dependent: :destroy has_many :liked_posts, through: :likes, source: :post end   1 2 3 4  class Like \u0026lt; ApplicationRecord belongs_to :post belongs_to :user end   コントローラーをいじる 1 2 3  def index @posts = Post.all.sort {|a,b| b.liked_users.count \u0026lt;=\u0026gt; a.liked_users.count} end   ここでは sort というrubyのメソッドを使って順序を操作している。\n=\u0026gt; sortに関してはこちらを参照\na.liked_users.count、b.liked_users.count が表しているのはそれぞれ各投稿のいいね数。\nすなわち、各投稿のいいね数を比較して昇順で並び替えている。\nビューで表示させる あとはビューで表示させるだけ。\n\u0026lt;% @posts.each do |post| %\u0026gt; #省略 \u0026lt;% end %\u0026gt; まだまだ知らないメソッドたちはたくさんあるなぁ。\n参考  Array#sort (Ruby 2.7.0 リファレンスマニュアル) ","description":"Ranking by like counts using rails","id":4,"section":"posts","tags":null,"title":"[Rails] いいね数順でランキング","uri":"http://example.org/posts/2020/rails-ranking-by-like/"},{"content":"JSでよくお目にかかるキーワードをまとめてみました。\n今後も追加していくと思います。\nJavaScriptを学習していると、よくわからない概念やライブラリに出会う機会が多いです。\nその中でも特によく耳にするものをざっくりまとめてみました。(ホントにざっくり)\n各内容をもっと掘り下げた参考記事も貼っているので気になる方はそちらも読んでみてください。\nECMAScript ECMAScriptとはJavaScriptの言語仕様の取り決め。\nよく耳にする ES2015 や ES6 といった用語はJavaScriptのバージョンを表し、ここで出てくる ES がECMAScriptのこと。\n【JavaScript】JavaScript、その前に〜ECMAScriptとは？\nnpm Node Package Manager、すなわちNode.jsのパッケージを管理するもの。\nnpmのおかげで、 npm install 〇〇 と打つだけで便利なライブラリを簡単にインストールして利用することができる。\nnpmとは\nyarn 2016年にFacebookが公開したかなり新しめのJavaScriptパッケージマネージャ。\n役割はnpmとほぼ同じだが、npmと比べてインストール・セキュリティ・バージョン管理の面で優れている。\nyarnとは\npackage.json パッケージマネージャを用いてプロジェクトを作成する際に、プロジェクトが依存するパッケージに関する情報（さらにはプロジェクト全体に関する情報）を記録するファイルがpackage.json。\nプロジェクトを動作させるために必要なパッケージをdependencies属性とdevDependencies属性に記述しておけば、npm install コマンドを打つだけでプロジェクト環境を復元できるため、非常に便利。\n【初心者向け】NPMとpackage.jsonを概念的に理解する\nBabel BabelはJavaScriptのコンパイラ。\nこれを使うとJavaScriptのコードを新しい書き方から古い書き方へと変換してくれる。\nブラウザによって対応しているJavaScriptのバージョンや仕様が異なるので、各ブラウザの環境に合わせて記法を変換する必要がある。\n【５分でなんとなく理解！】Babel入門\nwebpackとBabelの基本を理解する(1) ―Babel編―\nwebpack webpackはモジュールバンドラ。\nモジュールバンドラとは、複数のファイルを１つにまとめて出力してくれるツールのこと。\nwebpackはJSファイルだけでなく、CSSや画像ファイルも1つにまとめてくれる。\nwebpackを使えば、開発時には機能ごとにファイルを分割して開発を進めることができ、読み込み時には1つのファイルとして読み込めるので、非常に便利。\nwebpackってどんなもの？\nwebpackとBabelの基本を理解する(1) ―webpack編―\nESLint ESLint は JavaScript のための静的検証ツール。\nコードを実行する前に明らかなバグを見つけたり、括弧やスペースの使い方などのスタイルを統一したりするのに役立つ。\nESLint 最初の一歩\n","description":"Keywords of JavaScript","id":5,"section":"posts","tags":null,"title":"聞いたことはあるがよくわからないJavaScript周辺のあれこれ","uri":"http://example.org/posts/2020/keywords-js/"},{"content":"7月にやったことのログ。\n成長も見やすいし何やったか振り返れるので、毎月やったことをログとして残していこうと思う。\nちなみにこれまでの記事は以下です。\n コロナ自粛期間の4月にやったこと コロナ自粛期間の5月にやったこと コロナ自粛期間の6月にやったこと  7月にやったこと 7月はあまり頑張れなかった。先月にやると言ってたJS関係の勉強は頑張って取り組んだが、集中力が続かず、進捗も生めず。\n技育祭 7月上旬はなんといってもこのイベント。今年はコロナの影響もあってオンラインだったけど、コンテンツ充実しまくりで最高の2日間だった。有名企業の最前線でバリバリ活躍しているエンジニアの方々、CTOの方々、みんな超かっこよかったなぁ。当日は参加するルームを選択する形だったこともあり、見れていない登壇もあるのでアーカイブに期待\u0026hellip;！\nサービス開発のお手伝い 知人の紹介でRailsを使ったサービス開発にジョインすることになった。今月はサービスの改修や新規機能の開発を少し任せてもらった。ユーザーがいるサービスの開発に携わるのは初めてなので、緊張感もありつつ、すごく楽しい。\nJavaScript データ型やリテラル、ES5以降とそれ以前の違い、プロトタイプオブジェクトの考え方、関数、などなどJavaScriptの基礎をじっくり学習した。個人的にthisの挙動と非同期処理の理解にかなり苦しんだ。というか、今も完璧に理解しているとは言い難い。。。\nTypeScript JavaScriptの学習を一通り終えると次はTypeScriptの学習に入った。文法的にはほぼJSなので、型システムを理解できればいいのでは？と思ってる。TypeScript触った後に生のJavaScript触ると型がなくて不安になる。\nNode.js / React / MongoDB これまた知人の紹介でNode.js / React / MongoDBを使用しているサービスの改修をすることになったので、そこらへんをインプット。全部新しく学ぶ概念たちなのでなかなか大変、だけど楽しい。\n基本情報技術者試験の勉強を少し 基本情報技術者試験はCSの基礎をさっとさらうのに適していると耳にしたので、その勉強を少し。基数変換 / 論理回路 / CPU / メモリ / DB / ネットワーク少し / セキュリティ / テスト / オブジェクト指向 あたりの分野をざっと参考書で読み、過去問を解くなどした。\nまとめ 7月は全然頑張れなかった。。。毎年梅雨の時期はやる気が出なかったり、体調が優れない。8月から心機一転頑張りたいなぁ、梅雨さん早く明けておくれ。。。\n8月は色々やりたい。というか携わる予定の開発の案件が多いので、整理して取り組まないと詰む。余裕があれば、バックエンドRailsでAPI、フロントReact使ったアウトプット作ってみたい、あとはDockerとAWSあたりもう少し踏み込みたい。7月からまたコロナがヤンチャし始めたので、先行きが不安。。。\n","description":"log on July","id":6,"section":"posts","tags":null,"title":"コロナ自粛期間の7月にやったこと","uri":"http://example.org/posts/2020/log-on-july/"},{"content":"railsのlink_toでの遷移先を別タブで表示させたい。\nRailsでlink_toを使うときに別タブで表示させたいと思い、実装したのでメモとして残しておきます。\n手順 まず link_to で表示させたい文字列とリンク先URLを指定。\n\u0026lt;%= link_to \u0026quot;文字列\u0026quot;, \u0026quot;リンク先URL\u0026quot; %\u0026gt; 別タブで表示させるため、target: :_blank を追加\n\u0026lt;%= link_to \u0026quot;文字列\u0026quot;, \u0026quot;リンク先URL\u0026quot;, target: :_blank %\u0026gt; これで別タブで開けるようになる。\nしかし、これだとパフォーマンスとセキュリティの面で問題が。。。\n グーグルのエンジニアが警告、「別タブで開く」リンクは実はヤバいんだって！？【SEO情報まとめ】 実はヤバい？危険な「別タブで開く（target=”_blank”）」  この問題を回避するためには rel=\u0026quot;noopener noreferrer\u0026quot; をつけるといいみたい。\n\u0026lt;%= link_to \u0026quot;文字列\u0026quot;, \u0026quot;リンク先URL\u0026quot;, target: :_blank, rel: \u0026quot;noopener noreferrer\u0026quot; %\u0026gt; これで安心して別タブを開けます。\n","description":"Open the page on another tab by using rails","id":7,"section":"posts","tags":null,"title":"[Rails] link_toのリンク先を別タブで表示させたい","uri":"http://example.org/posts/2020/rails-link_to/"},{"content":"6月にやったことのログ。\n成長も見やすいし何やったか振り返れるので、毎月やったことをログとして残していこうと思う。\nちなみにこれまでの記事は以下です。\n コロナ自粛期間の4月にやったこと コロナ自粛期間の5月にやったこと  6月にやったこと 6月に入って徐々にコロナの自粛モードが解けてきたので、外出する機会も増えた。とはいえ、まだ怪しいので油断大敵。今月は自分のオリジナルアプリ作ったり書籍を読んで勉強できた。\nリモートインターン 6月上旬は先月から取り組んでいるインターンの課題に引き続き取り組んだ。結果的に即戦力としては力不足と判断されたが、研修のような形で引き続き課題に取り組むことになった。貴重な機会をいただけて感謝しかない。\nHTML/CSS これまで適当にやっていたHTML/CSSの概念をきちんと勉強した。HTMLに関しては、レイアウトを構築していく上で必要なツリー構造の考え方やSEOを意識したセマンティクスなどの考え方を学んだ。CSSに関しては、要素の並べ方がかなりうまくなったと思う。レスポンシブに必要なメディアクエリについても学んだほか、16進数で指定する色の考え方に関連して基数変換も勉強した。\nAWS AWSは4月に少し勉強していたが、この機会に入門書を一冊購入し、ハンズオンで学習した。IAMユーザーを登録するところから始まり、S3を利用した静的なサイトのホスティングや、LAMPサーバーでWordPresswpを動かすところまでやってみた。VPC、EC2、S3、RDS、Elastic IP、Route 53などの基本的な概念はざっと理解した。書籍の通りLAMP環境の構築をしただけなので、Railsとかでも同様にやってみたい。\nWeb API あまり理解できていなかったWeb APIを理解するために入門書を読んだ。RailsでJSONを返す簡易APIを作ったり、実際に公開されているAPIを叩いてみたりして、APIの考え方がだいぶ分かるようになってきた。とはいえ自分でAPIを作ってフロントに渡すとかはまだできないので勉強して実装したい。\nVue.js Udemyの講座を受講し、ディレクティブやコンポーネントなどの考え方をざっと理解したので、ポートフォリオを作成。できたサイトはNetlifyでGitHubと連携させて自動デプロイした。ネット上の色々なポートフォリオを参考にしながら、シンプルなレイアウトとデザインを心がけた。また、ポートフォリオの作成途中にAtomic Designという考え方に出会った。デザインの考え方についてもオーソドックスなところは勉強していかねば。\nよかったら以下の記事も読んでみてください。\n大学生がVue.jsでポートフォリオを作成してみた\nポートフォリオ作成 APIの勉強とVue.jsの勉強を兼ねてポートフォリオを2つ作成した。まだ実装途中の部分もあるが、一通りの機能とデプロイはできた。\nまとめ 7月はJSに注力したい。JSの基礎的な概念からNode.jsやReact、他にTypeScriptなどを用いたより実践的なことにも取り組みたい。\n","description":"log on June","id":8,"section":"posts","tags":null,"title":"コロナ自粛期間の6月にやったこと","uri":"http://example.org/posts/2020/log-on-june/"},{"content":"Vue.jsでポートフォリオを作ったのでまとめました。\n作ったサイト https://mk-portfolio-site.netlify.app/\n動機 今回サイトを作った動機は「自分のポートフォリオサイト持ってるのってなんかかっこいいよなぁ」と思ったからです。ちょうどいいアウトプットにもなりそうだったので作ることにしました。かかった期間は3日間。時間でいうと20時間くらいです。\n1日目 サイトの構成を練る ネット上で他の方が作ったポートフォリオを色々見まくって考えました。\n内容は以下の４項目に決めました。他の学生のポートフォリオを見ていると、インターンの開発経験や研究の内容を盛り込んでいる人も結構いましたが、自分は書くことがなかったのでその項目は外しました。悲しい。。。\n Top(トップページ) About(プロフィール) Skills(使ってきた技術) Works(制作物)  デザインに関しても色々な方のポートフォリオを参考にしました。色やレイアウトはなるべくシンプルなものを目指しました。\n使用技術の選定 基本的なレイアウトやデザインはHTML/CSS、動きをつけたりコンポーネントをまとめる部分でVue.jsを中心に使おうと決めました。Vue.jsを選択した理由は大きく2つ。1つ目の理由は他のライブラリやフレームワーク(ReactやAngularなど)と比べてとっつきやすいから、2つ目は人気そうだから、です(笑)。実際触ってみてかなり使いやすかったのでポートフォリオ作成したい人はVue.jsオススメです！\n環境構築 \u0026amp; 大枠の実装 Vue.js を vue-cli を使ってシンプルにはじめてみる という記事を見ながらVue CLIを使ってプロジェクトを作成しました。\nサイトの大まかなレイアウトやデザインを実装しました。細かいアニメーションやリンクの対応はまだできていない状態でした。\n2日目 おしゃれなライブラリを導入 Vue.jsでポートフォリオを書くという記事に書かれていたvue-typerとsmoothScrollという2つのライブラリを導入しました。サイトに簡単な動作をつけたい人にはオススメです。\nhover時の動作 ボタンや画像のhoverに応じた色の変化や表示非表示の切り替えなどの動作をつけていきました。この辺ができてくると動きが出てきて楽しい。\n3日目 レスポンシブデザイン 今だとスマホで見る人が圧倒的に多いので、レスポンシブは必須かなと思い導入しました。レイアウトとフォントサイズの調整が主だったので割と簡単でした。1つ大変だったのがハンバーガーメニューです。ヘッダーにサイドバーを表示させるためのハンバーガーメニューを実装しました。Vue.jsのトランジションを取り入れて滑らかなアニメーションが実現できたかなと思います。(よかったらスマホで見てみてください\u0026hellip;！)\nサイト公開 デプロイはNetlifyを利用しました。GitHubと連携させて自動デプロイができるので超便利です。vue-cliとNetlifyで始めるお手軽サイトホスティングという記事を見れば簡単にホスティングできます。Github Pagesでもいいと思います。\nもう少しやりたかったこと ディレクトリ構成 \u0026amp; 単一ファイルコンポーネント 実際にプロジェクトを作成していく中でディレクトリ構成に悩みました。そこで Vue.js ディレクトリ構成 色々試してみた という記事を参考にModules \u0026amp; Pagesパターンを採用してプロジェクトに反映させようとしました。Modulesに再利用可能なコンポーネント、Pagesに基本的なページ構成を書いていく、という考え方です。Vue.jsには単一ファイルコンポーネントという考え方があります。これは部品の再利用性や可読性を高めるために、レイアウトを部品ごとに分けて実装しようという考え方です。ディレクトリ構成は考えたもののうまくコンポーネントをまとめられなかったので、この辺はもう少し勉強して改善したいところです。\nアニメーション CSSアニメーションやVue.jsのトランジションを絡ませてサイトに動きをつけようとしたのですが、結構大変でした。上の方でも触れているハンバーガーメニューの実装は頑張りましたが、他のアニメーションに関しては今回は諦めました。時間ができたらまた挑戦したいです。\nまとめ 思っていたより楽に良さげなサイトを作ることができました。「お手軽にポートフォリオ作ってみたい！」という方はぜひVue.js使ってみてください。では！\n参考記事  Vue.js を vue-cli を使ってシンプルにはじめてみる Vue.jsでポートフォリオを書く フロント未学習の大学生が1週間でVue.jsを使ったポートフォリオを作った話 vue-cliとNetlifyで始めるお手軽サイトホスティング Vue.js ディレクトリ構成 色々試してみた  その他様々なポートフォリオサイトを拝見し、参考にさせていただきました。\n","description":"I developed my portfolio site","id":9,"section":"posts","tags":null,"title":"大学生がVue.jsを使って3日間でポートフォリオを作成してみた","uri":"http://example.org/posts/2020/vue-portfolio/"},{"content":"webサーバとアプリケーションサーバの違いについてのまとめです。\n「webサーバとアプリケーションサーバって何が違うんだろう？」、ふと思ったのでまとめた。\nサーバとは まずサーバって何？という話。サーバは英語でserver、つまり供給する・提供するってこと。IT用語辞典 によるとサーバとは、コンピュータネットワークにおいて、他のコンピュータに対し、自身の持っている機能やサービス、データなどを提供するコンピュータのこと。私たちがwebページを閲覧するとき、自分のPCから「このページ見たい！」とサーバにお願いする。すると、サーバが「はい、これ！」とページを返してくれる。これで、めでたくwebページが見れる。通常、個々のサーバ機やサーバソフトは、外部に提供する機能やサービス、対応しているデータ形式やプロトコル（通信規約）が決まっている。そして、「DBサーバ」「webサーバ」「アプリケーションサーバ」のように、提供する機能などの種類を冠して「○○サーバ」と呼ぶ。\nwebサーバ webサーバはブラウザからのコンテンツのリクエストを受け取り、ブラウザにレスポンスを返すのが役割。このときのリクエストが静的なwebコンテンツだった場合(HTML、CSS、画像ファイルのような更新しない限り同じ表示コンテンツを表示するコンテンツ)、webサーバが処理してレスポンスを返す。また、クライアントごとに表示内容を変化させる処理が必要な動的なwebコンテンツの場合、webサーバはアプリケーションサーバへとリクエストを送る。そして、アプリケーションサーバから返ってきた結果をレスポンスとして返します。webサーバとして有名なのは Nginx、Apache など。\nアプリケーションサーバ アプリケーションサーバは私たちが作ったアプリケーションを動かしてくれるもの。webサーバから送られてきたリクエストをアプリケーションサーバからアプリケーションに伝え、アプリが処理した結果をwebサーバに返す。ローカル環境下での開発の場合はアプリケーションサーバのみを立てるが、本番環境ではwebサーバをアプリケーションの手前に置くことで、静的なコンテンツの処理を負担させることが多い。\n例えばRailsだったら Railsのアプリケーションサーバとして代表的なのはUnicorn、Thin、Rainbows、Pumaなど。webサーバから送られてきたリクエストをアプリケーションサーバからRailsアプリケーションに伝え、Railsアプリが処理した結果をwebサーバに返す。ローカル環境下での開発の場合はPumaのようなRails用のアプリケーションサーバのみを立てる(普段development環境でやってるやつ)。一方、本番環境(production環境)ではwebサーバをRailsアプリケーションの手前に置き、静的なコンテンツの処理を負担させることが多い。こうすることで、Webサーバが複数のアプリケーション一度に処理したり、アセットを素早くレンダリングしたりして、リクエストごとに発生する多くの処理をさばいてくれる。\nRack ここでRackに触れておく。RackとはRuby製のフレームワークとアプリケーションサーバの間に入り、互いをつなぐ役割をしてくれる。サーバはRackを使用することで、送られてきたHTTPのリクエストがアプリにも理解できる形に変換される。逆にアプリからのレスポンスはRackを通じてHTTPに変換されてサーバに返る。Rackを使用することでサーバとフレームワークの組み合わせが自由になる。\nまとめ ここまでの内容をまとめる。ブラウザから送られてきたリクエストをwebサーバが受け取り、静的なwebコンテンツだった場合レスポンスをブラウザに返す。しかし、リクエストが動的なwebコンテンツの場合、webサーバでは処理せず、アプリケーションサーバに送る。そして、アプリケーションサーバがミドルウェアを通してアプリに伝える。処理が終わったら、先ほどとは逆の順番で結果をブラウザに返す。\n参考  webサーバーとアプリケーションサーバーの違い IT用語辞典 Rails開発におけるwebサーバーとアプリケーションサーバーの違い（翻訳） ","description":"Difference between web server and application server","id":10,"section":"posts","tags":null,"title":"webサーバとアプリケーションサーバって何が違うんだろう？","uri":"http://example.org/posts/2020/web-app-server/"},{"content":"モジュール・パッケージ・ライブラリの区別難しい。。。\n「モジュール」・「パッケージ」・「ライブラリ」はよく聞くワードだが、違いがよく分からなかったので調べてまとめてみた。調べているとPythonを前提にした記事が多かったので、本記事でもPythonを前提に進める。他の言語等に対しても同じ理論が通用するかについては不明だが、おそらく通ずるところはあると思う。\nモジュール モジュールとは.pyで作られるファイルのこと。ある程度長いプログラムを書く際に.pyファイルに内容を保存。そして使いたい時がきたら、他のPythonファイルからimportでモジュールとして呼び出す。もちろん、呼び出したモジュールに保存されているクラスや関数は呼び出し先でも利用可能。\nパッケージ パッケージとはいくつかのモジュールをディレクトリに整理し、ひとまとめにしたもの。機能が似通っているモジュール同士が複数あると、それらをまとめた方が扱いやすくなる。importでパッケージを呼び出すと、パッケージ内にある全てのモジュールの内容を利用できるようになる。\nライブラリ ライブラリとはいくつかのパッケージをインストールできる形にまとめたもの。ライブラリには、Pythonに付属していてすぐに使える 標準ライブラリ と、ダウンロードなど追加インストールをしてから利用する 外部ライブラリ がある。機械学習で用いられる「TensorFlow(テンソルフロー)」、グラフ描画に使われるMatplotlib（マットプロットリブ）、データ解析を支援する機能を提供するPandas（パンダス）などは全て外部ライブラリ。\n階層 ライブラリ \u0026gt; パッケージ \u0026gt; モジュール\n参考  Pythonのモジュール、パッケージ、ライブラリ徹底解説！ ","description":"Difference among module/package/library","id":11,"section":"posts","tags":null,"title":"モジュール・パッケージ・ライブラリの違いがよく分からないので整理してみた","uri":"http://example.org/posts/2020/module-package-library/"},{"content":"5月にやったことのログ。\n成長も見やすいし、何やったか振り返れるので、毎月やったことをログとして残していこうと思う。\nちなみに先月の記事は以下です。\n コロナ自粛期間の4月にやったこと  5月にやったこと 今月は急なタスクが降ってきたりして、5月当初に思い描いていた1ヶ月とはちょっと違った。けど、色々と嬉しいこともあったので良かった。ちな、生活の仕方は基本的に先月と変わらずニートをぶっ通した。6月はさすがにもうちょい外出できそうかな。笑\nFlutter 5月頭にインターン先でFLutterを使ったハッカソンが行われた。スマホアプリ作ること自体初めてだったのでめちゃくちゃ楽しかった。普段関わりの少ない東京のメンターたちと関われたのも刺激的だった。賞は取れなかったけどね〜。\nJavaScriptとVue.js JavaScriptの勉強ようやく始めた。とりあえず手を動かそうと思って、ドットインストールのJavaScriptを一通り学習した。ES6以降とそれ以前での仕様の違いをおおよそ理解した。async/await、promiseあたりの概念はまだ理解できない。。。\nフレームワークに関しては、「一番とっかかりやすそう」という理由だけでVue.jsを選択。チュートリアルを一通り確認して電卓を作ってみた。その後Udemyの講座をやりかけていたところで、後述するインターンのお誘いがあったので、Vue.jsは一旦中断。\nリモートインターン SNS上で運よくつながった方からリモートインターンのお誘いを受け、とりあえず1ヶ月試用期間として雇ってもらうことになった。1ヶ月で1つWebサービスを完成させないといけないので、5月中旬からはこの作業にだいぶ時間を割いてる。\nテーブルのリレーション 上記のサービスを作る中でRailsを使ったバックエンドの構築を一通りおこない、その中でリレーションの理解が深まった。多対多、１対多などの関係性を意識しながら複数のテーブルを繋いでいく作業は超楽しい。\nJavaScript これも上記のサービスを作る中でフロント部分に使用。JavaScriptは全然触れたことがないので、分からないことしかない、大変。でも良い勉強になってる。\n就活で内定 就活で志望度高かった企業から内定をいただきました、嬉しい。来年からはエンジニアとして東京で働くことになりそう。「文系未経験から半年でエンジニア就職した」みたいな記事、また書こうかな〜。こんなご時世なので、とりあえず内定いただけてほっとしてます、、、感謝。。。\nまとめ 4月にやろうと思ってたことはあんまりできなかったけど、新しいことにチャレンジできてる毎日なので、これはこれで良き。\n6月の目標はインターンの課題終わらせることと、Vue.jsでアウトプット作ること。それから色々書籍が積読状態なので、こっちも消化していきます。ではでは、6月も頑張っていきやしょー！！\n","description":"Log on May","id":12,"section":"posts","tags":null,"title":"コロナ自粛期間の5月にやったこと","uri":"http://example.org/posts/2020/log-on-may/"},{"content":"4月にやったことのログ。\n成長も見やすいし、何やったか振り返れるので、毎月やったことをログとして残していこうと思う。\n4月にやったこと コロナで自粛期間に入り、他にやることもないので、この1ヶ月は勉強が捗った。4月はプログラミングスクールのメンターとしてリモートインターンをしているか、自分の勉強をしているか、その2択だった。流石にニート。たぶん5月もこんな感じ。笑\nRailsでLINEBot作成 かねてから作ってみたかったLINEbotを作成。LINEが大部分の機能を用意してくれているので意外と簡単にできた。\nRailsとGooglemapの連携 Railsで登録した住所を元に緯度・経度の情報をとってきて地図で表示するという機能を実装した。APIを利用したのは初めてで、JSがわからないこともあって、色々と苦戦したが、なんとかできた。\nRaisでポーカーの役判定アプリ 数字とマークを入力したらポーカーの役を判定してくれるアプリ。RailsというかRubyやね。インターンの課題で勉強したけど、面白かった。色々あって結局そこのインターンには参加しないですが(笑)。ストレートフラッシュの実装がむずいんよ。\nDocker 仮想環境のことを全然知らなかったので、勉強した。VMと比べて、Dockerがどれほど優秀かということを実感。Docker使ってRailsの仮想環境立ててみたり。これは本当にすごい、感動。\nAWS サーバーとかネットワークの仕組みを理解する上で、いい勉強になった。教材をやっただけなので、実際にRailsを動かせるように、これから色々いじってみようかなと。\nAtCoder 競技プログラミングは敬遠していたが、アルゴリズムとデータ構造の理解は、エンジニアを志す上で避けて通れないので、始めることにした。しかし、やってみると意外と楽しい笑。数学の問題を解く感じで進めていけるのは楽しい。とはいえ、まだクソ雑魚問題しか解けないので、5月以降も継続して取り組んでいこうと思う。\nSQL SNSで新卒研修で使用されて教材が上がっていたので、それを元にチュートリアル演習。狙ったデータを引っ張ってこれた時が楽しい。割と時間がかかったが、面白かったし勉強になった。\nFlutter 5月頭にインターン先でハッカソンが行われた。使用した言語は今アツいFlutter。アプリ開発は全く触ったことがなかったので、初めて勉強した。が、めちゃめちゃ面白かった。シミュレーターが立ち上がるとテンション爆上げ。4月中旬くらいからハッカソンに向けて学習を進めた。\nJavaScript Googlemapの表示でJSが出てきたり、Flutterで使われてるDartという言語がAltJSだったり。これはもう「JSやれ」と言われてるとしか思えなかったので、勉強をスタート。ドットインストールで色々ゲームとか作りつつ、理解が微妙なところは書籍で補う感じで進める。大体の理解はできたかなと。5月はフレームワーク勉強してアウトプット2つくらい作れたらいいなぁって感じです。\nまとめ 書き出すと意外と勉強してるなと思った。笑\n勉強と並行して、就活はガッツリやってます。早く内定ほしい。。。\nプログラミング勉強してて思うけど、やっぱり開発インターンしたいなぁ。実務を経験してみたいという思いがかなりあるんですが、このご時世やと厳しいですな。とりあえず今自分にできることを精一杯やろうかなと。とりあえず、5月の目標はJavaScriptのフレームワークでアウトプット作成することと、AWS・Docker・Railsを一通り使ってアウトプット作成すること。では今月も頑張りましょー！\n","description":"Log on April","id":13,"section":"posts","tags":null,"title":"コロナ自粛期間の4月にやったこと","uri":"http://example.org/posts/2020/log-on-april/"},{"content":"「PATHを通す」ってよく聞くけど、意味がよく分からなかったので勉強しました。\nPATHを通すの意味がよくわからんので、色々調べました。\nそもそもPATHとは PATHとは環境変数の1つ。環境変数とはPC環境についての変数で、すでに多くの環境変数が設定されている。Terminalで\n1  $ env   と入力すると、設定されているすべての環境変数が表示される。\n1 2 3 4 5 6 7 8 9 10 11 12 13  PWD=/Users/hogehoge SHELL=/bin/zsh PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin COLORTERM=truecolor HOME=/Users/hogehoge USER=hogehoge LOGNAME=hogehoge ZSH=/Users/hogehoge/.oh-my-zsh PAGER=less LESS=-R LC_CTYPE=en_US.UTF-8 LSCOLORS=Gxfxcxdxbxegedabagacad _=/usr/bin/printenv   例えば$HOMEという環境変数がホームディレクトリのパスになっていたり、$USERという環境変数にユーザ名が入ってるのがわかる。＄PATHという環境変数にもパスが入っているのが分かる。\nPATH変数 Terminal上でコマンドが実行されたらコンピュータはそのコマンドを探しに行く。でも、コンピュータの中にはたくさんのファイルやフォルダがあるので、コンピュータ内をすべて探していたら時間がかかる。PATH変数に登録されているPATHだけ探すことで手間を省いている。\n実際に通っているPATHはechoコマンドで確認できる。\n1 2  $ echo $PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin   パスは:で区切られており、今回の例では下記のパスが設定されている。\n1 2 3 4 5 6  /usr/local/bin /usr/bin /bin /usr/sbin /sbin /usr/local/sbin   PATHを通す PATHを通すというのはすなわちPATHという環境変数に新しいパスを追加するということ。新しいパスを追加したい場合は、~/.bash_profileなどの設定ファイルに\n1  export PATH=$PATH：\u0026lt;追加したいPATH\u0026gt;   を追記すればいい。\n環境変数を永続化する PATH以外でも、環境変数を永続化する場合、やり方は同様。環境変数はshellからexitすると消えるので、環境変数を永続化するためにはshellファイルを利用する。Bashというshellなら~/.bash_profileや~/.bashrc、zshなら~/.zshrcがshellファイルに当たる。このファイルの中にexportで環境変数を追加する処理を加えれば、環境変数を永続化できる。すなわち、Terminalを再び立ち上げた後もその変数を利用できる。\n","description":"Understand the meaning of「PATHを通す」","id":14,"section":"posts","tags":null,"title":"【PATHを通す】を理解する","uri":"http://example.org/posts/2020/pass-path/"},{"content":"Web API is 何？\nAPIとは Web APIの前に、そもそもAPIとはApplication Program Interfaceの略。どのアプリーケーションでも共通で使える機能を提供する仕組み。\n 例えば「AというファイルをBという名前でコピーをして、作業完了したら、ポップアップウィンドウを出して知らせる！」というプログラムを作るとします。実際にどんな動きをするのかパートに分けてみると……、\n   Aというファイルを選択 実行ボタンを押すと3のステップへ データをコピーする コピーされたデータをBという名前を付け保存 ポップアップウィンドウを出して作業完了を告げる    この1.〜5.の作業をすべて一から作成すると、かなり手間が掛かります（マウスの動きを計算して、ウィンドウのデザインを考えて……）。そこで登場するのがAPIです。\n   ファイルを選択するAPI ボタンを押すとプログラムを動かすAPI データをコピーするAPI ファイルに名前を付けるAPI ウィンドウを出してメッセージを出すAPI    と、いろいろな機能があるAPIから、必要なAPIを探し出し組み合わせるだけで、プログラムができてしまうのです。つまりAPIは「特定の機能を持つプログラム部品」なのです。よく使われる命令をAPIにしてみんなで共有してしまえば、非常に効率的に作業ができますね。\n  API\n図1 APIを使えば、細かい作業や無駄を省いてプログラムができる\n  by https://www.atmarkit.co.jp/ait/articles/0703/13/news095.html\n Web APIとは Web APIはWebサービスの窓口。外部Webサービスから通信を通して、操作することができる。自分で作成することも可能。\n具体例 １：【マッチングアプリ】\nFacebook APIから情報を取得。Facebook API経由でFacebookの友達のデータを取ってきて、そのデータを元にその人とは会わないようにアプリ側が人をマッチングさせてくれる。\n具体例 ２：【食べログ】\nGoogle Maps APIから情報を取得。「ウェブサイトに地図を埋め込む」、「レストランや店舗のデータベースを、地図情報とともに提供する」、「目的までの最適なルートを探し出す」、といった機能を実現している。\n具体例 ３\nPythonでTwiiter APIからツイートを取得しフォロワーの全ての人のデータを取ってくることもできる。\nWeb APIに対応している主なサービス  Twitter Instagram Youtube Google map Slack Chatwork 仮想通貨  APIを実装してみる  Web APIとは？ （LINE bot API・グルナビAPI） Ruby on Rails: twitterでユーザー認証 ドットインストール/Google Maps API入門 (全17回)  参考資料  https://qiita.com/busyoumono99/items/9b5ffd35dd521bafce47 https://qiita.com/Arata0608/items/f292dedffc8c0db1df28 https://www.atmarkit.co.jp/ait/articles/0703/13/news095.html ","description":"What is web API","id":15,"section":"posts","tags":null,"title":"Web APIの概念を押さえる","uri":"http://example.org/posts/2020/what-is-web-api/"},{"content":"Linuxとはそもそも何なのかについて調べました。\nOS OSとは、Operating Systemの略で、システム全体を管理するソフトウェアのこと。\nみんながPCとして利用しているWindowsやMacなどもOS。\nLinux プログラミングではLinuxというOSがよく用いられる。LinuxはWindowsやMacとは異なり、厳密にはOSの中核部分(Linuxカーネル)を指す。\n実用的なOSとして動かすためには、カーネルに加え、画面表示・通信・ファイル管理など各種機能を担うソフトウェアを組み合わせる必要がある。\n車に例えるならカーネルはエンジン。エンジンは車の中核部分だが、車が走行するためにはブレーキ・アクセル・ハンドルなどの部品が必要になる。\nLinuxカーネルとソフトウェアを組み合わせて実際に機能するOSを作り上げるためには、Linuxカーネル自体やOSに関する深い知識が必要となるため、現実的ではない。\nLinuxディストリビューション そこで、一般のユーザーや開発者が手軽にLinuxを利用できるよう、Linuxカーネルと各種ソフトウェアをいい感じに組み合わせて配布されているものがある。これが「Linuxディストリビューション」。一般的には色々なLinuxディストリビューションをまとめて「Linux」と呼ぶことが多い。\nサーバー向けに安定性を重視したもの、古いPCでも快適に利用できるものなど、Linuxディストリビューションには様々な用途に最適化されたものが存在している。\nLinuxを使う理由 プログラミングのためにLinuxを使う理由は、Linuxにはプログラミング用のソフトウェアが豊富に存在し、便利だから。\nさらに、 Linux は GNU General Public Licence (グヌー・ジェネラル・パブリック・ライセンス、GPL) というライセンスの下で提供されているため、基本的に無料で利用できる。\nこれは膨大な数の PC を用意することになるサーバー運営において、大きくコストを下げることができるというメリットがある。\nそのためWebプログラミングの世界では、広くLinuxが利用されている。\n","description":"What is linux","id":16,"section":"posts","tags":null,"title":"Linuxとは","uri":"http://example.org/posts/2020/what-is-linux/"},{"content":"JavaScriptの新記法ES6の基礎を少し学んだので、そのアウトプットです。\nES6とは ES6はJavaScriptの新しいバージョン。\n現在は多くのブラウザが対応していないため、ES6で書いたコードを動かすためにはES5(1つ前のバージョン)への変換が必要になる。\nこの変更を\u0026quot;トランスパイル\u0026quot;と呼び、Babelというツールを利用してトランスパイルを行う。\nletとconst letで変数を、constで定数を定義できる。\nletは再代入が可能であるのに対し、constは再代入が不可能。\nletでの変数宣言\nlet name = 'Jonh'; console.log(name); // =\u0026gt; Jonh name = 'Kate'; // 再代入する console.log(name); // =\u0026gt; Kate constでの変数宣言\nconst name = 'Jonh'; console.log(name); // =\u0026gt; Jonh name = 'Kate'; // 再代入するとエラーになる テンプレートリテラル バッククオートで文字列を囲むと、${}で文字列内に変数展開ができ、改行も反映できる。\nconst name = 'Jonh'; const age = 21; console.log(`${name}は${age}歳です`); // =\u0026gt; Jonhは21歳です アロー関数 関数とはいくつかの処理をまとめたもの。\nアロー関数は関数の中でも無名関数の省略形で、従来より簡潔な記述で関数を定義できる。\n通常の関数\nconst a = function(){ //まとめたい処理 }; 上と同義のアロー関数\nconst a = () =\u0026gt; { //まとめたい処理 }; Class構文 オブジェクトを生成する際、最初に設計図を用意する必要がある。\nこの設計図を\u0026quot;クラス\u0026quot;と呼ぶ。\n「class クラス名」とすることでクラスを定義することができる。\nclass User = { constructor() { this.name = 'Jonh'; } } //クラスの定義 const user = new User(); //インスタンスを生成 console.log(user.name); // =\u0026gt; Jonh ","description":"Foundation of ES6","id":17,"section":"posts","tags":null,"title":"ES6(JavaScript)の基礎を押さえる","uri":"http://example.org/posts/2020/es6-tutorial/"},{"content":"Dockerと仮想マシンの違いについてまとめてみました。\nDockerとは Dockerとは軽量な仮想化環境を実現するためのツールです。\nDockerを利用すればOSの内部に独立したアプリケーションの実行環境を構築することができます。この構築環境をコンテナと呼びます。\nコンテナ コンテナ内のファイルシステムやリソースはベースOSと分離されており、コンテナ内は実行環境として独立しています。\nコンテナを利用することで、1つのOS内に複数の実行環境を構築できます。\nイメージ イメージとはコンテナを生成する元になるものです。同じイメージを使えば、同じ Linux ディストリビューションで同じアプリケーションがインストールされた全く同じ環境を複製することができます。\nまた、Dockerではイメージを編集し、イメージの機能・内容を継承することもできます。\nDockerイメージを使うことで、従来必要だったプログラミング言語のインストールやフレームワークのインストールといった手間がかからず、パソコンのプログラミング環境を汚すことなく様々なアプリ開発に即・挑戦できるという訳です。\n仮想マシン 仮想マシンとは仮想的にハードウェアを動作させることです。\n仮想マシンには大きく分けて「ホスト型」と「ハイパーバイザー型」の２種類あります。\nホスト型とハイパーバイザー型 ホスト型とは、OSに仮想化ソフトウェアをインストールし、その上で仮想マシンを動かすことです。既存のサーバーを使えるため、手軽に利用できる一方で、ハードウェアにアクセスする際OSを経由しなければいけません。\nハイパーバイザー型とは、ホストOSを使わず直接サーバーにインストールし仮想マシンを動かすことです。ハードウェアのリソースを直接管理できます。\nホストOSとゲストOS 仮想化・仮想マシンに関連してよく出る用語が「ホストOS」と「ゲストOS」です。\nホストOSは仮想環境の土台となるOSのことで、ゲストOSは仮想マシン上にインストールされたOSのことです。\nたとえば、Linuxサーバ上に仮想マシンを作り出しWindowsをインストールしたら、ホストOSはLinuxでゲストOSはWindowsということになります。\n仮想マシンとDockerコンテナの違い 仮想マシンはマシン単位での仮想化であるのに対して、Dockerコンテナはプロセス単位での仮想化となっています。\n仮想マシンは自由度が高い一方で、リソースの消費が激しいです。\nそれに対して、Dockerコンテナは仮想マシンよりも軽量ですが、OSをホストと共有するため自由度は下がります。\n","description":"Difference between docker and vm","id":18,"section":"posts","tags":null,"title":"Dockerと仮想マシンの違い","uri":"http://example.org/posts/2020/difference-docker-vm/"},{"content":"SQLとはデータベース言語であり、データベースを管理するソフトウェアを操作・制御することが目的です。\nSQLとは データベースというのは、集めたデータをプログラムによって整理し、操作できるようにしたものです。データベース言語はデータを管理して、ユーザーが指定した条件に合致するものを見つけ出すためのものです。\nSQLの種類 SQLは、大きく分けて以下の3種類の言語から構成されています。\n データ定義言語(CREATE,DROP,ALTER等) データ操作言語(INSERT,UPDATE,DELETE,SELECT) データ制御言語(GRANT,REVOKE,SET TRANSACTION,BEGIN,COMMIT,ROLLBACK,SAVEPOINT,LOCK)  今回はデータ操作言語に該当するSQLの４大命令についてまとめてみました。\nSQLの４大命令とは SQLの４大命令とは以下の４種類です。\n   命令 説明 文法     INSERT データを追加する INSERT INTO テーブル名 (カラム名1, カラム名2, \u0026hellip;) VALUES (値1, 値2, \u0026hellip;);   SELECT データを取得する SELECT カラム名1, カラム名2, \u0026hellip; FROM テーブル名 [WHERE 絞込条件];        UPGRADE データを更新する UPDATE テーブル名 SET カラム名1=値1 [, カラム名2=値2 \u0026hellip;] [WHERE 絞込条件];   DELETE データを削除する DELETE FROM テーブル名 [WHERE 絞込条件];         INSERT テーブルにデータを追加する\n1  INSERT INTO \u0026#34;テーブル名\u0026#34; (\u0026#34;列名1\u0026#34;, \u0026#34;列名2\u0026#34;, \u0026#34;列名3\u0026#34;, ...) VALUES (\u0026#34;値1\u0026#34;, \u0026#34;値2\u0026#34;, )   SELECT テーブルからデータを取得する\n1  SELECT \u0026#34;列名\u0026#34;... FROM \u0026#34;テーブル名\u0026#34; (WHERE \u0026#34;条件式\u0026#34;)   UPGRADE テーブルにデータを追加する\n1  UPDATE \u0026#34;テーブル名\u0026#34; SET \u0026#34;列名=値1\u0026#34;, \u0026#34;列名2=値2\u0026#34;, ... (WHERE \u0026#34;条件式\u0026#34;)   ※注:WHEREのないUPDATEは全レコードが更新される。\nDELETE テーブルのデータを削除する\n1  DELETE FROM \u0026#34;テーブル名\u0026#34; (WHERE \u0026#34;条件式\u0026#34;)   ※注:WHEREのないDELETEは全レコードが消去される。\n","description":"SQL, language to control DB","id":19,"section":"posts","tags":null,"title":"SQLの４大命令について","uri":"http://example.org/posts/2020/sql-order/"},{"content":"こんにちは、世界。\n","description":"This is my awesome post!","id":20,"section":"posts","tags":null,"title":"My First Post","uri":"http://example.org/posts/myfirstpost/"}]