<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>develop on My Hugo Blog</title>
    <link>http://example.org/categories/develop/</link>
    <description>My Hugo Blog (develop)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Nov 2020 00:00:00 +0900</lastBuildDate>
    
    <atom:link href="http://example.org/categories/develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>静的サイトジェネレーターHugoで自作ブログ</title>
      <link>http://example.org/posts/make-hugo-blog/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0900</pubDate>
      
      <guid>http://example.org/posts/make-hugo-blog/</guid>
      <description>&lt;p&gt;今回Hugoで自作ブログを作ってみました。&lt;/p&gt;
&lt;h2 id=&#34;hugoとは&#34;&gt;Hugoとは&lt;/h2&gt;
&lt;p&gt;Hugoとはスピードと柔軟性を兼ね備えたGo製の静的サイトジェネレーターです。
静的サイトジェネレーターやjamstackといった静的サイトベースの技術を最近よく目にするので、僕もその波に乗りました。(ミーハー)&lt;/p&gt;
&lt;p&gt;クラウドサーバーを使えば、自分でサーバーを管理する手間も省けるし、DBも不要。
あと、当たり前かもだけど動的サイトと比べるとページ表示速度がとにかく速い。
このあたりがWordpressのようなCMSと比べた時のメリットかなと思います。&lt;/p&gt;
&lt;h2 id=&#34;hugoでブログ作成をスタート&#34;&gt;Hugoでブログ作成をスタート&lt;/h2&gt;
&lt;p&gt;Hugoには素敵なテンプレートがたくさん用意されています。
ので、僕のように「完全オリジナルは面倒」という人も安心してください。
このブログも「」というテーマを拝借させていただいています。
&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugoテーマ一覧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下のコマンドを打つだけで最初のセットアップが完了します。
なんて便利なんだ、、、！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;$ hugo new site &amp;lt;ディレクトリ名&amp;gt;
$ cd &amp;lt;ディレクトリ名&amp;gt;
$ git init
$ git submodule add &amp;lt;GitHub上のテーマのurl&amp;gt; &amp;lt;テーマの名前&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あとは自分好みにレイアウトやデザインをカスタマイズしたり、記事を追加していけばいい感じになります。(適当)
各テーマのdocumentを見れば割とカスタマイズできるかと思います。&lt;/p&gt;
&lt;h2 id=&#34;firebaseでホスティング&#34;&gt;Firebaseでホスティング&lt;/h2&gt;
&lt;p&gt;FirebaseかNetlifyが良さそうだなぁと思っていたのですが、表示速度は妥協したくなかったのでfirebaseにしました。
ドメインはgoogle domainで取得しました。(まじで一瞬だった)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techblog.kayac.com/netlify-vs-firebase-2018&#34;&gt;徹底比較！Firebase vs Netlify (2018年版)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://usomitainikagayakumachi.tokyo/2018-05-29_github_pages_or_netrify_or_firebase/&#34;&gt;【GithubPages VS Netlify VS Firebase】爆速で静的サイトのホスティングができるのはどれ？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub Actionsで自動ビルド&amp;amp;デプロイをしてくれるように設定しておけば、pushするだけで本番環境に差分が反映されるのでオススメです。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;まだ未完成の部分もあるのでそこの調整は引き続きしていきます。
静的サイトジェネレーターめちゃくちゃ便利だなとしみじみ。
新しくブログを書き始めるならHugoにhello worldしてみてはどうでしょうか。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[mac]スクリーンショットを超快適にしよう</title>
      <link>http://example.org/posts/screen-shots-with-mac/</link>
      <pubDate>Fri, 13 Nov 2020 14:30:00 +0900</pubDate>
      
      <guid>http://example.org/posts/screen-shots-with-mac/</guid>
      <description>&lt;p&gt;Macでスクリーンショットを利用する際のtipsをシェアします。&lt;/p&gt;
&lt;h1 id=&#34;スクリーンショットする際のショートカットキー&#34;&gt;スクリーンショットする際のショートカットキー&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Command + Shift + 3&lt;/strong&gt;
画面全体をキャプチャ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command + Shit + 4&lt;/strong&gt;
マウスで選択した範囲のみキャプチャ。
マウスカーソルの形状が変わるのでキャプチャしたい範囲をドラッグで決める。
ESCでキャンセル。&lt;/p&gt;
&lt;h1 id=&#34;保存せずそのままクリップボードにコピーしたい場合&#34;&gt;保存せず、そのままクリップボードにコピーしたい場合&lt;/h1&gt;
&lt;p&gt;これ超便利！知らない人は人生半分損してる。。。
ドキュメント貼り付け作業が捗ります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command + Shift + Control + 3&lt;/strong&gt;
画面全体&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command + Shit + Control + 4&lt;/strong&gt;
マウス選択の範囲。&lt;/p&gt;
&lt;p&gt;上記のショートカットキー＋Controlキーを押すだけ。&lt;/p&gt;
&lt;h1 id=&#34;保存場所を変更&#34;&gt;保存場所を変更&lt;/h1&gt;
&lt;p&gt;デフォルトではデスクトップに保存されますが、任意のディレクトリに移動できます。
デスクトップにスクショ溜まるのうざいので、これは良い！
コマンドラインから設定し、再起動すれば反映されます。&lt;/p&gt;
&lt;p&gt;↓今回は ~/Downloads/ に設定していますが、別のディレクトリも指定可能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ defaults write com.apple.screencapture location ~/Downloads/　
↓デフォルトに戻す場合はこちら。設定値を削除するイメージです。
$ defaults delete com.apple.screencapture location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;↓やっぱりデフォルトに戻したい場合。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ defaults delete com.apple.screencapture location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;保存形式を変更&#34;&gt;保存形式を変更&lt;/h1&gt;
&lt;p&gt;デフォルトではpngで保存されます。
複数のファイル形式を指定できます。
用途に応じて保存時に形式変更できるので最高！
こちらもコマンドラインから設定し、再起動すれば反映されます。&lt;/p&gt;
&lt;p&gt;↓今回はjpgで保存する場合のコマンド。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;defaults write com.apple.screencapture type jpg;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;これであなたのスクリーンショットライフは超快適になること間違いなしですね！&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tocomi/items/8c8e8f8202ea6da2c46d&#34;&gt;macOSのスクリーンショット設定を変更する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/mamohacy/items/559af38aacb7a17a1600&#34;&gt;Macでスクリーンショットを撮る方法と保存先＆形式を変える方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[Rails] いいね数順でランキングかつページネーション</title>
      <link>http://example.org/posts/rails-ranking-by-like-with-pagination/</link>
      <pubDate>Wed, 11 Nov 2020 14:30:00 +0900</pubDate>
      
      <guid>http://example.org/posts/rails-ranking-by-like-with-pagination/</guid>
      <description>&lt;p&gt;以前このような記事を書きました。
&lt;a href=&#34;http://example.org/posts/rails-ranking-by-like/#アンカー&#34;&gt;[Rails]いいね数順でランキング&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この内容に加え、ページネーションを実装したのでメモとして残しておきます。
今回はいいね数順で並び替えた投稿を1ページに5つ表示させるページネーションの実装を目指します。&lt;/p&gt;
&lt;h1 id=&#34;前提&#34;&gt;前提&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;投稿のテーブルは &lt;code&gt;posts&lt;/code&gt;、 ユーザーのテーブルは &lt;code&gt;users&lt;/code&gt; とする。&lt;/li&gt;
&lt;li&gt;いいね機能に必要な中間テーブルは &lt;code&gt;likes&lt;/code&gt; とする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;posts&lt;/code&gt;・&lt;code&gt;users&lt;/code&gt;・&lt;code&gt;likes&lt;/code&gt; それぞれのテーブルはいずれも作成済みとする。&lt;/li&gt;
&lt;li&gt;ページネーションは&lt;code&gt;Kaminari&lt;/code&gt;というgemを使用して実装&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;手順&#34;&gt;手順&lt;/h1&gt;
&lt;h2 id=&#34;モデルにアソシエーションを定義&#34;&gt;モデルにアソシエーションを定義&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-post.rb&#34; data-lang=&#34;post.rb&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationRecord&lt;/span&gt;
    belongs_to &lt;span style=&#34;color:#e6db74&#34;&gt;:user&lt;/span&gt;
    has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:likes&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;dependent&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:destroy&lt;/span&gt;
    has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:liked_users&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;through&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:likes&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;source&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:user&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-user.rb&#34; data-lang=&#34;user.rb&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationRecord&lt;/span&gt;
  has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:posts&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;dependent&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:destroy&lt;/span&gt;
  has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:likes&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;dependent&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:destroy&lt;/span&gt;
  has_many &lt;span style=&#34;color:#e6db74&#34;&gt;:liked_posts&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;through&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:likes&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;source&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:post&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-like.rb&#34; data-lang=&#34;like.rb&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Like&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ApplicationRecord&lt;/span&gt;
  belongs_to &lt;span style=&#34;color:#e6db74&#34;&gt;:post&lt;/span&gt;
  belongs_to &lt;span style=&#34;color:#e6db74&#34;&gt;:user&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kaminari-をgemfileに追記し-bundle-install&#34;&gt;Kaminari をGemfileに追記し, bundle install&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Gemfile&#34; data-lang=&#34;Gemfile&#34;&gt;gem &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kaminari&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~&amp;gt; 0.17.0&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-zsh&#34; data-lang=&#34;zsh&#34;&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;コントローラーをいじる&#34;&gt;コントローラーをいじる&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-app/controller/posts_controller.rb&#34; data-lang=&#34;app/controller/posts_controller.rb&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;
  posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;includes(&lt;span style=&#34;color:#e6db74&#34;&gt;:liked_users&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort {&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;a,b&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;liked_users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;liked_users&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size}
  @posts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Kaminari&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;paginate_array(posts)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;page(params&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:page&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;per(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここでは &lt;code&gt;sort&lt;/code&gt; というrubyのメソッドを使って順序を操作している。
=&amp;gt; &lt;a href=&#34;https://docs.ruby-lang.org/ja/latest/method/Array/i/sort.html&#34;&gt;sortに関してはこちらを参照&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.liked_users.size&lt;/code&gt;、&lt;code&gt;b.liked_users.size&lt;/code&gt; が表しているのはそれぞれ各投稿のいいね数。
すなわち、各投稿のいいね数を比較して昇順で並び替えている。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sort&lt;/code&gt;メソッドによって生成される&lt;code&gt;posts&lt;/code&gt;という変数は配列のデータなので、&lt;code&gt;paginate_array&lt;/code&gt;というメソッドを使用している。&lt;/p&gt;
&lt;h2 id=&#34;ビューで表示させる&#34;&gt;ビューで表示させる&lt;/h2&gt;
&lt;p&gt;あとはビューで表示させるだけ。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-app/view/posts/index.html&#34; data-lang=&#34;app/view/posts/index.html&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;% @posts.each do |post| %&amp;gt;

  #省略

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;%= paginate @posts %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まだまだ知らないメソッドたちはたくさんあるなぁ。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ruby-lang.org/ja/latest/method/Array/i/sort.html&#34;&gt;Array#sort (Ruby 2.7.0 リファレンスマニュアル)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/you8/items/df68aaee3010e282d1ae&#34;&gt;[rails]kaminariを使ってページネーションを作る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.konboi.com/post/2013/03/31/224939/&#34;&gt;kaminariを使って配列に対してのページャーを作成する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>rebase完全に理解した</title>
      <link>http://example.org/posts/tutorial-rebase/</link>
      <pubDate>Sun, 25 Oct 2020 14:30:00 +0900</pubDate>
      
      <guid>http://example.org/posts/tutorial-rebase/</guid>
      <description>&lt;p&gt;最近実務で初めてrebaseを使って「？？？？」となったので調べました。&lt;/p&gt;
&lt;p&gt;以下の動画、記事が分かりやすかったです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CRlGDDprdOQ&#34;&gt;Git MERGE vs REBASE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/ja/git/tutorials/merging-vs-rebasing&#34;&gt;マージとリベース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;具体例&#34;&gt;具体例&lt;/h2&gt;
&lt;p&gt;今回は動画から引用してこのような場合を考えてみます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;m2まで作業が進んでいるmasterブランチからfeatureブランチへcheckout&lt;/li&gt;
&lt;li&gt;featureブランチでf1をコミット&lt;/li&gt;
&lt;li&gt;masterブランチにcheckoutしてm3をコミット&lt;/li&gt;
&lt;li&gt;再度featureブランチにcheckoutしてf2をコミット
&lt;img src=&#34;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/575694/adb79854-97ec-a83f-0ac8-0f61e8c9719a.png&#34; alt=&#34;スクリーンショット 2020-10-25 10.58.28.png&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ここまでの各ブランチのlog&#34;&gt;ここまでの各ブランチのlog&lt;/h2&gt;
&lt;h4 id=&#34;masterブランチのlog&#34;&gt;masterブランチのlog&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;m3
m2
m1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;featureブランチのlog&#34;&gt;featureブランチのlog&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;f2
f1
m2
m1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;merge-vs-rebase&#34;&gt;merge vs rebase&lt;/h2&gt;
&lt;p&gt;ここからfeatureブランチにて、masterブランチを&lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;するとそれぞれどうなるか見ていきます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git merge master&lt;/code&gt;のlog&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;f2
m3
f1
m2
m1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;git rebase master&lt;/code&gt;のlog&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;f2
f1
m3
m2
m1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;merge&lt;/code&gt;では時系列に沿ってそのまま差分を統合しているのに対し、&lt;code&gt;rebase&lt;/code&gt;ではfeatureブランチの先端がmasterで置き換えられています。
&lt;code&gt;rebase&lt;/code&gt;を用いるとコミット履歴がすっきりしますね。&lt;/p&gt;
&lt;h2 id=&#34;rebaseのアンチパターン&#34;&gt;rebaseのアンチパターン&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.atlassian.com/ja/git/tutorials/merging-vs-rebasing&#34;&gt;この記事&lt;/a&gt;から引用します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;リベースの特徴を理解できたら、次に最も重要なことは、実行してはいけないときを知ることです。git rebase の黄金律は、リベースを public ブランチでは決して使用しないことです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;masterブランチにて、自分の作業ブランチをrebaseしてしまうとmasterのコミット履歴が書き換えられてしまいます。
このように、他の人にも共有済みのブランチで&lt;code&gt;rebase&lt;/code&gt;は使わないように注意しましょう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
